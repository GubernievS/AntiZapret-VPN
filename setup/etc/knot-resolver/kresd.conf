-- Knot DNS Resolver configuration in -*- lua -*-
-- Refer to manual: https://www.knot-resolver.cz/documentation/stable

local systemd_instance = os.getenv("SYSTEMD_INSTANCE")

if string.match(systemd_instance, '^1') then
	-- Network interface configuration
	net.listen('10.29.0.1', 53, { kind = 'dns', freebind = true })
	net.listen('10.29.4.1', 53, { kind = 'dns', freebind = true })
	net.listen('10.29.8.1', 53, { kind = 'dns', freebind = true })

	-- Switch to unprivileged user
	user('knot-resolver', 'knot-resolver')

	-- Set cache size and cache directory
	cache.open(100 * MB, 'lmdb:///var/cache/knot-resolver')

	-- Clear cache upon restart
	cache.clear()

	-- Minimum TTL in seconds
	cache.min_ttl(300)

	-- Load useful modules
	modules = {
			'hints > iterate',	-- Load /etc/hosts and allow custom root hints
			'stats',			-- Track internal statistics
			'predict'			-- Prefetch expiring/frequent records
	}
elseif string.match(systemd_instance, '^2') then
	-- Network interface configuration
	net.listen('127.0.0.1', 53, { kind = 'dns', freebind = true })

	-- Switch to unprivileged user
	user('knot-resolver', 'knot-resolver')

	-- Unload cache module
	modules.unload('cache')
else
	panic("Use kresd@1 or kresd@2 instance names")
end

-- Turns off DNSSEC validation
trust_anchors.remove('.')

-- Disable using IPv6 for contacting upstream DNS
net.ipv6 = false

-- Disable refuse queries without RD bit (Recursion Desired)
modules.unload('refuse_nord')

-- Unload DNSSEC modules
modules.unload('validate')
modules.unload('ta_update')
modules.unload('ta_signal_query')
modules.unload('ta_sentinel')
modules.unload('detect_time_skew')

-- Unload extended DNS error codes module
modules.unload('extended_error')

-- Unload Priming module
modules.unload('priming')

-- Unload EDNS keepalive module
modules.unload('edns_keepalive')

-- Disable detect discontinuous jumps in the system time
modules.unload('detect_time_jump')

-- Disable EDNS in upstream DNS queries
policy.add(policy.all(policy.FLAGS({'NO_EDNS'})))

if string.match(systemd_instance, '^1') then
	function match_query_type(action, target_qtype)
		return function (state, query)
			if query.stype == target_qtype then
				-- filter matched the query, return action function
				return action
			else
				-- filter did not match, continue with next filter
				return nil
			end
		end
	end

	-- Return an empty response for IPv6-address queries
	policy.add(match_query_type(policy.ANSWER({}, true), kres.type.AAAA))

	-- Return an empty response for HTTPS queries
	policy.add(match_query_type(policy.ANSWER({}, true), kres.type.HTTPS))

	-- Optional blocking ads, trackers, malware and phishing websites
	policy.add(policy.rpz(policy.DENY, '/etc/knot-resolver/deny.rpz', true))

	-- Resolve blocked domains using proxy.py
	policy.add(policy.rpz(policy.STUB('127.0.0.2'), '/etc/knot-resolver/proxy.rpz', true))

	-- Use only TCP for upstream DNS queries
	--policy.add(policy.all(policy.FLAGS({'TCP'})))

	-- Resolve OpenNIC, Emercoin and Namecoin domains
	policy.add(
		policy.suffix(
			policy.STUB({'51.158.108.203', '95.216.99.249', '185.226.181.19', '195.10.195.195'}),
			policy.todnames({'bbs.', 'chan.', 'cyb.', 'dyn.', 'epic.', 'geek.', 'gopher.',
							'indy.', 'libre.', 'neo.', 'null.', 'o.', 'oss.', 'oz.',
							'parody.', 'pirate.', 'free.', 'bazar.', 'coin.', 'emc.',
							'lib.', 'fur.', 'bit.', 'ku.', 'te.', 'ti.', 'uu.'})
		)
	)

	-- Resolve other, non-blocked domains
	policy.add(policy.all(policy.STUB({'193.58.251.251'})))
else
	-- Use only TCP for upstream DNS queries
	--policy.add(policy.all(policy.FLAGS({'TCP'})))

	-- Resolve only blocked domains
	policy.add(policy.all(policy.STUB({'1.1.1.1', '1.0.0.1'})))
end

-- Uncomment only for debugging or logging DNS requests
--log_level('debug')