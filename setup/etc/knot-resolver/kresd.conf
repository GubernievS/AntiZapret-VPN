-- Knot DNS Resolver configuration in -*- lua -*-
-- Refer to manual: https://knot-resolver.readthedocs.org/en/stable

-- Network interface configuration
net.listen('10.29.0.1', 53, { kind = 'dns', freebind = true })
--net.listen('10.29.0.1', 853, { kind = 'tls', freebind = true })
--net.listen('10.29.0.1', 443, { kind = 'doh2', freebind = true })

-- Switch to unprivileged user
user('knot-resolver','knot-resolver')

-- Set cache size and cache directory
cache.open(100 * MB, 'lmdb:///var/cache/knot-resolver')

-- Clear cache upon restart
cache.clear()

-- Minimum TTL in seconds
cache.min_ttl(120)

-- Turns off DNSSEC validation
--trust_anchors.remove('.')

-- Disable using IPv6 for contacting upstream nameservers
net.ipv6 = false

-- Load TLS certificate and private key for DoT and DoH
--net.tls("/etc/knot-resolver/server-cert.pem", "/etc/knot-resolver/server-key.pem")

-- Load useful modules
modules = {
		'hints > iterate',	-- Load /etc/hosts and allow custom root hints
		'stats',			-- Track internal statistics
		'predict'			-- Prefetch expiring/frequent records
}

-- Load blocked hosts
dofile('/etc/knot-resolver/blocked-hosts.conf')

-- Ad blocking hosts
policy.add(
	policy.rpz(
		policy.DENY, '/etc/knot-resolver/adblock-hosts.rpz'
	)
)

-- Resolve blocked hosts in proxy.py
policy.add(
	policy.suffix(
		policy.STUB(
			'127.0.0.1'
		),
		policy.todnames(blocked_hosts)
	)
)

-- Resolve OpenNIC, EMCDNS and Namecoin domains
policy.add(
	policy.suffix(
		policy.STUB(
			{'172.104.136.243', '176.126.70.119', '87.98.175.85', '193.183.98.66'}
		),
		policy.todnames({'bbs.', 'chan.', 'cyb.', 'dyn.', 'geek.', 'gopher.',
						'indy.', 'libre.', 'neo.', 'null.', 'o.', 'oss.', 'oz.',
						'parody.', 'pirate.', 'free.', 'bazar.', 'coin.', 'epic.',
						'emc.', 'lib.', 'fur.', 'bit.', 'ku.', 'te.', 'ti.', 'uu.'}
		)
	)
)

-- Filter which matches AAAA or HTTPS queries, action is policy.REFUSE
policy.add(function (state, query)
		if query.stype == kres.type.AAAA or query.stype == kres.type.HTTPS then
			-- filter matched the query, return policy.REFUSE
			return policy.REFUSE
		else
			-- filter did not match, continue with next filter
			return nil
		end
	end
)

-- Upstream DNS
policy.add(
	policy.all(
		policy.FORWARD({'77.88.8.8', '77.88.8.1'})
	)
)