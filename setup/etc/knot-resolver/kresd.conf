-- Refer to manual: https://knot-resolver.readthedocs.org/en/stable

-- Network interface configuration
net.listen('127.0.0.1', 53, { kind = 'dns' })
net.listen('192.168.100.1', 53, { kind = 'dns', freebind = true })
net.listen('192.168.104.1', 53, { kind = 'dns', freebind = true })

-- Switch to unprivileged user
user('knot-resolver','knot-resolver')

-- Cache size
cache.size = 100 * MB

-- Turns off DNSSEC validation
--trust_anchors.remove('.')

-- Clear cache upon restart
cache.clear()

-- See https://gitlab.labs.nic.cz/knot/knot-resolver/issues/470
net.ipv6 = false

-- Load useful modules
modules = {
        'hints > iterate',  -- Load /etc/hosts and allow custom root hints
        'stats',            -- Track internal statistics
        'predict',          -- Prefetch expiring/frequent records
}

-- minimum TTL = 2 minutes
cache.min_ttl(120)

dofile('/etc/knot-resolver/knot-aliases-alt.conf')

policy.add(
    policy.suffix(
        policy.STUB(
            {'127.0.0.4'}
        ),
        policy.todnames(blocked_hosts)
    )
)

-- Resolve OpenNIC, EMCDNS and Namecoin domains
policy.add(
    policy.suffix(
        policy.STUB(
            {'172.104.136.243', '176.126.70.119', '87.98.175.85', '193.183.98.66'}
        ),
        policy.todnames({'bbs.', 'chan.', 'cyb.', 'dyn.', 'geek.', 'gopher.',
                         'indy.', 'libre.', 'neo.', 'null.', 'o.', 'oss.', 'oz.',
                         'parody.', 'pirate.', 'free.', 'bazar.', 'coin.',
                         'emc.', 'lib.', 'fur.', 'bit.', 'ku.', 'te.', 'ti.', 'uu.'
                         }
        )
    )
)

-- Filter which matches AAAA or HTTPS queries, action is policy.DENY
policy.add(function (state, query)
        if query.stype == kres.type.AAAA or query.stype == kres.type.HTTPS then
            -- filter matched the query, return policy.DENY
            return policy.DENY
        else
            -- filter did not match, continue with next filter
            return nil
        end
    end
)

-- Upstream DNS
policy.add(policy.all(policy.FORWARD({'1.1.1.1', '1.0.0.1'})))